const shared = (tabelColumns, columns, action) => {
  let defaultValue = "";
  const foreignKeys = [];

  if (action === "addColumn") {
    tabelColumns = ``;
  }

  for (let key in columns) {
    if (columns[key].default && action !== "addColumn") {
      if (columns[key].default === "date.now") {
        defaultValue = ` DEFAULT CURRENT_TIMESTAMP`;
      } else if (columns[key].default === "bit") {
        defaultValue = ` DEFAULT ${columns[key].default}`;
      } else {
        defaultValue = ` DEFAULT '${columns[key].default}'`;
      }
    }

    if (action === "addColumn") {
      tabelColumns += `${key} ${columns[key].type}${defaultValue}`;
    } else if (columns[key].type === "foreign_key") {
      tabelColumns += `, ${key} int`;
      foreignKeys.push(
        `, FOREIGN KEY (${key}) REFERENCES ${columns[key].table} (id)`
      );
    } else {
      tabelColumns += `, ${key} ${columns[key].type}${defaultValue}`;
    }

    defaultValue = "";
  }

  foreignKeys.map(fk => {
    tabelColumns += fk;
  });

  return tabelColumns;
};

const postgres = (columns, action) => {
  let tabelColumns = `id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY`;

  return shared(tabelColumns, columns, action);
};

const sqlite3 = (columns, action) => {
  let tabelColumns = `id integer primary key`;

  return shared(tabelColumns, columns, action);
};

module.exports = {
  postgres,
  sqlite3
};
